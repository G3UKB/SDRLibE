(*
	pubsub.8th
 
  Publish/Subscribe system
 
 Copyright C 2018 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ Includes
"p_st.8th"  f:include

\ ========================================
\ Testing only
needs debug/sed
\ true SED-CHECK

\ Set namespace
ns: C

\ =============================================================================================
\ Publish Subscribe task
\ ========================================
\ General Helpers
\
\ Return the data element
: data@	SED: m -- *
	\ in: 	{ "type" : ... , "data" : Any }
	\ out:	Opaque data
	"data" m:@ nip ;

\ ----------------------------------
\ Return the pub/sub store	
: store@	SED: -- m
	\ in: 	none
	\ out:	pub/sub store
	"ps_s" t:@ ;

\ ----------------------------------	
\ Retrieve the event name
: evnt_name@ SED: m -- s
	\ in: 	{ "type" : ... , "data" : [evnt-name, f] }
	\ out:	evnt-name
	data@ 0 a:@ nip ;
	
\ ========================================
\ Registration helpers
\
\ Retrieve the event flag
: evnt_flg@ SED: m -- T
	\ in: 	{ "type" : ... , "data" : [evnt-name, f] }
	\ out:	flag
	data@ 1 a:@ nip ;	

\ ----------------------------------
\ Does the event name already exist
: ps_exists?	SED: m -- F
	\ in: 	{ "type" : ... , "data" : [evnt-name, f] }
	\ out:	flag
	evnt_name@ store@ swap m:exists? nip ;

\ ----------------------------------
\ Return default event data
: ps_make_evnt_data	SED: m -- a
	\ in: 	{ "type" : ... , "data" : [evnt-name, f] }
	\ out:	[evnt_flg, []]
	a:new 0 rot evnt_flg@ a:! 1 a:new a:! ; 

\ ----------------------------------
\ Store initial event data
: ps_store_new	SED: a m -- 
	\ in: 	{ "type" : ... , "data" : [evnt-name, f] }
	\				[f, []]
	\ out:	[evnt_flg, []]
	evnt_name@ store@ swap rot m:! drop ;

\ ----------------------------------
\ Register a new entry	
: ps_reg_new	SED: m --
	\ in: 	{ "type" : ... , "data" : [evnt-name, f] }
	\ out:	none
	dup ps_make_evnt_data
	swap ps_store_new ;

\ ========================================
\ Subscribe helpers
\
\ Retrieve the callback word
: evnt_callback@ SED: m -- w
	\ in: 	{ "type" : ... , "data" : [w] }
	\ out:	w
	data@ 1 a:@ nip ;

\ ========================================
\ Publish helpers
\
\ Retrieve the subscriber list
: sub_list@ SED: m -- a
	\ in: 	{ "type" : ... , "data" : [w] }
	\ out:	w
	\ [f,[w,w,..]]
	evnt_name@ store@ swap m:@ nip ;

\ ----------------------------------
\ Retrieve the event data	
: evnt_data@ SED: m -- *
	\ in: 	{ "type" : ... , "data" : [w] }
	\ out:	event-data
	"data" m:@ nip 1 a:@ nip ;

\ ========================================
\ Message handlers
\ Initialise the p/s structure
: do_init SED: m --
	\ in: 	{ "type" : "init" }
	\ out:	none
	\
	\ Create the dictionary in a task var
	\ Form is as follows
	\ {"name": [f,[w1,w2,w3...]], "name1": [f,[w4,w5,w6...]], ...}
	drop {} "ps_s" t:! ;

\ ----------------------------------
\ Terminate task
: do_term SED: m --
	\ in: 	{ "type" : "term" }
	\ out:	none
	drop false "pub_sub_run" t:!
;

\ ----------------------------------
\ Register a new event
: do_reg	SED: m --
	\ in: 	{ "type" : "reg" , "data" : [evnt-name, f] }
	\ out:	none
	\ data: [evnt-name, f] where f==true if dispatch on main thread
	dup >r
	ps_exists? if
		\ Problem
		"The registration " r> evnt_name@ s:+ " already exists!" s:+ throw  
	else
		\ Create a new registration
		r> ps_reg_new
	then ;

\ ----------------------------------
\ Subscribe to an event
: do_sub	SED: m --
	\ in: 	{ "type" : "sub" , "data" : [event-name, w]}
	\ out:	none
	dup >r
	ps_exists? if
		\ Add a new subscriber to the event
		\ Get the callback array
		store@ r@ evnt_name@ m:@ nip
		\ Get the callback word array [f,[w,w, ..]]
		1 a:@ nip
		\ Append the new callback word to the array
		r@ evnt_callback@ a:push drop
	else
		\ Problem
		"No registration " r> evnt_name@ s:+ " to subscribe to!" s:+ throw 
	then ;

\ ----------------------------------
\ Dispatch to subscriber on main thread
\ Callee must consume 'data' on TOS
: main_thd_dispatch	SED: m --
	\ in: 	{"cb" : w, "to" : w, "data" : Opaque}
	\ out:	none
	"data" m:@ swap "to" m:@ nip w:exec ;

\ ----------------------------------
\ Dispatch to subscriber
\ Callee must consume 'data' on TOS
: pubsub_dispatch		SED: n w --
	\ in: 	idx of item
	\				word to dispatch to
	\				p: flag, data
	\ out:	p: flag, data
	nip >r
	1 pp@ if
		\ Dispatch on main thread
		\ Word to invoke on main thread
		{ "cb" :' main_thd_dispatch }
		\ Word 'to' dispatch 'data' to
		\ Note we clone the data again to ensure no conflicts
		"to" r> m:! "data" p@ clone nip m:!
		g:do
	else
		\ Dispatch on this thread, no clone as ownership is this thread
		\ The subscriber callback must not dispatch again on another thread!
		p@ r> w:exec	
	then ;

\ ----------------------------------
\ Publish an event	
: do_pub	SED: m --
	\ in: 	{ "type" : pub , "data" : [event-name, event-data]}
	\ out:	none
	dup >r
	ps_exists? if
		\ Get the subscriber list and dispatch flag
		\ Push the dispatch flag to the p stack
		r@ sub_list@ a:open swap >p
		\ For each subscriber send data to the subscribers callback word
		\ This is always being sent from the same task so locking is not necessary
		\ The data has been cloned from the original publisher so the data is never
		\ read by more than one task.
		\ Push the data to the p stack as we need to retain a copy
		r> evnt_data@ >p ' pubsub_dispatch a:each drop
	else
		\ Problem
		"No registration " r> evnt_name@ s:+ " to publish to" s:+ throw 
	then ;

\ ========================================
\ Decode and dispatch to message handlers
: msg_decode	SED: m -- 
	\ in: 	{"type" : "init"|"reg"|"sub"|"pub|"term", "data" : Opaque
	\ out:	none
	"type" m:@
	{ "init" : ' do_init , "reg" : ' do_reg , "sub" : ' do_sub , "pub" : ' do_pub , "term" : ' do_term }
	case
;

\ =============================================================================================
\ Task helpers and entry point

\ ----------------------------------
\ Q timeout 100ms
: q_timeout_ms	SED: -- n
	100 ;

\ ----------------------------------	
\ Q size 20
: q_sz	SED: -- n
	20 ;

\ ----------------------------------
\ Process 1 item from Q	
: proc_q	SED: --
	t:pop null? if
		"Warning, p/s q returned null!" log drop
	else
		\ Message to process
		msg_decode
	then ;

\ ----------------------------------
\ Task entry point
\ All events are handled by this task which dispatches:
\ 	- on its thread for SYS events
\		- on the main thread for UI events
: pub_sub_task	 SED: --
	\ in: 	none
	\ out:	none
	\ Give us a name
	"PUB-SUB-TASK" t:name!
	\ Set us in the run state
	true "pub_sub_run" t:!
	\ Init the param stack
	ps_alloc
	
	\ Up the q a little
	q_sz t:def-queue
	\ Set q to return null on empty
	\ Note, should not happen
	t:getq false q:throwing drop
	
	\ Loop while running
	repeat
		\ Wait for a wake up call or timeout
		q_timeout_ms t:q-wait
		' proc_q t:qlen times
		\ Check for exit
		"pub_sub_run" t:@
	while!
	"pub_sub_task - exiting..." log ;

\ Reset namespace
ns: user

\ ===============================================================================
\ Main code may be called from any thread
\ ===============================================================================

null var, t_pubsub

\ ----------------------------------
\ Initialise publish/subscribe system
: pubsub_init	SED: --
	\ in: 	none
	\ out:	none
	' C:pub_sub_task t:task dup t_pubsub !
	{"type" : "init"} t:push t_pubsub @ t:notify ;

\ ----------------------------------
\ Terminate publish/subscribe system
: pubsub_term	SED: --
	\ in: 	none
	\ out:	none
	t_pubsub @ {"type" : "term"} t:push t_pubsub @ t:notify ;

\ ----------------------------------	
\ Register a new event
\ All events must be registered before they can be used
\ Event names are just strings
: pubsub_register	 SED: T s -- 
	\ in:		s - event name 	
	\				f - true if to be dispatched on main thread else p/s thread
	\ out:	none
	a:new 0 rot a:! 1 rot a:!
	{"type" : "reg"} "data" rot m:!
	t_pubsub @ swap t:push t_pubsub @ t:notify ;

\ ----------------------------------
\ Subscribe to an event
: pubsub_subscribe	 SED: s w -- 
	\ in:		s - event name	
	\				w - callback word 	
	\ out:	none
	a:new 1 rot a:! 0 rot a:!
	{"type" : "sub"} "data" rot m:!
	t_pubsub @ swap t:push t_pubsub @ t:notify ;

\ ----------------------------------
\ Publish an event to subscribers
: pubsub_publish	 SED: s * -- 
	\ in:		* - event-data 
	\				s - event-name	
	\ out:	none
	\ Clone the original data to avoid locks
	clone nip
	a:new 1 rot a:! 0 rot a:!
	{"type" : "pub"} "data" rot m:!
	t_pubsub @ swap t:push t_pubsub @ t:notify ;
	
\ ===============================================================================
\ Testing
\ ===============================================================================

: callback_wd_1	\ data
	"Hi, callback received on callback_wd_1: " t:name@ s:+ " : " s:+ . . cr ;

: callback_wd_2	\ data
	"Hi, callback received on callback_wd_2: " t:name@ s:+ " : " s:+ . . cr ;
	
: testit
	pubsub_init
	
	\ Task q gets messed up without sleeps
	false "Event1" pubsub_register
	0.2 sleep
	false "Event2" pubsub_register
	0.2 sleep
	true "Event3" pubsub_register
	0.2 sleep
	"Event1" ' callback_wd_1 pubsub_subscribe
	0.2 sleep
	"Event2" ' callback_wd_1 pubsub_subscribe
	0.2 sleep
	"Event3" ' callback_wd_1 pubsub_subscribe
	0.2 sleep
	"Event1" ' callback_wd_2 pubsub_subscribe
	0.2 sleep
	"Event2" ' callback_wd_2 pubsub_subscribe
	0.2 sleep
	"Event3" ' callback_wd_2 pubsub_subscribe
	0.2 sleep
	"Event1" [1,2,3,4,5] pubsub_publish
	0.2 sleep
	"Event2" [1,2,3,4,5] pubsub_publish
	0.2 sleep
	"Event3" [1,2,3,4,5] pubsub_publish
	0.2 sleep
	
	(*
	\ In-line works
	true "Event1" a:new 0 rot a:! 1 rot a:!
	{"type" : "reg"} "data" rot m:!
	t_pubsub @ swap .s t:push
	
	true "Event2" a:new 0 rot a:! 1 rot a:!
	{"type" : "reg"} "data" rot m:!
	t_pubsub @ swap .s t:push
	*)
	
	pubsub_term
;

1 sleep
testit
bye
	