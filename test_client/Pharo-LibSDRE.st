Object subclass: #UDPCmd	instanceVariableNames: 'socket buffer serverAddr serverCmdPort serverDisplayPort1 serverDisplayPort2 serverDisplayPort3'	classVariableNames: ''	poolDictionaries: ''	category: 'Pharo-LibSDRE'!!UDPCmd methodsFor: 'scripting' stamp: 'BobCowdery 12/4/2018 14:37'!setDefaultAudioRoute	"set a route from receiver 1 to the default audio device for both channels"	| message dev route |	" get the output enumeration"	self sendMessage: self getEnumOutputsMessage.	message := self receiveMessage .	Transcript show: 'EnumOutputs: ... ' ; cr .	" message is an array of devices	we want the second device which is the speaker output"	dev := (message at: 'outputs') at: 2 .	" now send the audio route message "	route := self getAudioRouteMessageFor: 1 loc: 'LOCAL' rec: 1 api: (dev at: 'api') dev: (dev at: 'name') ch: 'BOTH' .	self sendMessage: route .	Transcript show: 'SetRoute: ' .	Transcript show: self receiveMessage ; cr .	! !!UDPCmd methodsFor: 'scripting' stamp: 'BobCowdery 12/4/2018 14:34'!basicScript	"run radio for one rx with local audio output"		self sendMessage: self getDiscoverMessage .	Transcript show: 'Discover: '.	Transcript show: self receiveMessage ; cr .	self setDefaultAudioRoute .	self sendMessage: self getServerStartMessage .	Transcript show: 'ServerStart: ' .	Transcript show: self receiveMessage ; cr .	self sendMessage: self getRadioStartMessage .	Transcript show: 'RadioStart: '.	Transcript show: self receiveMessage; cr .			! !!UDPCmd methodsFor: 'initialization' stamp: 'BobCowdery 12/3/2018 16:08'!initialize	"create UDP socket"	socket := Socket newUDP.	serverAddr := #[127 0 0 1].	serverCmdPort := 10010.	serverDisplayPort1 := 10011.	serverDisplayPort2 := 10012.	serverDisplayPort3 := 10013.	buffer := ByteArray new: 5000 .! !!UDPCmd methodsFor: 'udp' stamp: 'BobCowdery 12/4/2018 14:13'!receiveMessage	"receive a message from the server"	| resp break counter |		break := false .	counter := 20 .	[ break ] whileFalse: [ 		counter := counter -1 .		resp := socket receiveUDPDataInto: buffer .		(( resp at: 1 ) > 0 ) 		ifTrue: [ break := true ]		ifFalse: [ 100 milliSeconds asDelay wait ] .		counter <= 0 ifTrue: [			break := true .			Transcript show: 'Timeout waiting for response' ; cr .		] .	] .	^ NeoJSONReader fromString: (buffer asString) .! !!UDPCmd methodsFor: 'udp' stamp: 'BobCowdery 12/4/2018 14:14'!sendMessage: message	"send a message to the server"	socket sendUDPData: message toHost: serverAddr port: serverCmdPort.! !!UDPCmd methodsFor: 'messages' stamp: 'BobCowdery 12/3/2018 15:40'!getDiscoverMessage	"message to discover hardware"	^ NeoJSONWriter toString: (Dictionary newFrom: { 'cmd'->'radio_discover' . 'params'->#() }) .	! !!UDPCmd methodsFor: 'messages' stamp: 'BobCowdery 12/3/2018 19:49'!getEnumOutputsMessage	"message to enumerate audio outputs"	^ NeoJSONWriter toString: (Dictionary newFrom: { 'cmd'->'enum_outputs' . 'params'->#() }).	! !!UDPCmd methodsFor: 'messages' stamp: 'BobCowdery 12/4/2018 09:53'!getAudioRouteMessageFor: dir loc: loc rec: rx api: api dev: dev ch: ch	"message to set a new audio route"	| msg |	msg := Dictionary newFrom: { 'cmd'->'set_audio_route' } .	msg at: 'params' put: (Array with: dir with: loc with: rx with: api with: dev with: ch) .	^ NeoJSONWriter toString: msg .	! !!UDPCmd methodsFor: 'messages' stamp: 'BobCowdery 12/4/2018 14:18'!getSetDispStatusMessageFor: recv1 recv2: recv2 recv3: recv3	"message to set display status"	| msg |	msg := Dictionary newFrom: { 'cmd'->'set_disp_status' } .	msg at: 'params' put: ( Array with: recv1 with: recv2 with: recv3 ) .	^ NeoJSONWriter toString: msg .	! !!UDPCmd methodsFor: 'messages' stamp: 'BobCowdery 12/3/2018 19:50'!getRadioStartMessage	"message to start radio"	^ NeoJSONWriter toString: (Dictionary newFrom: { 'cmd'->'radio_start' . 'params'->#() }).	! !!UDPCmd methodsFor: 'messages' stamp: 'BobCowdery 12/3/2018 19:50'!getServerStartMessage	"message to start server"	^ NeoJSONWriter toString: (Dictionary newFrom: { 'cmd'->'server_start' . 'params'->#() }).	! !